import sys
import pygame
import random

pygame.init()

# Screen dimensions
WIDTH, HEIGHT = 800, 600
GRID_SIZE = 25

# Colors
WHITE = (255, 255, 255)
BLACK = (0, 0, 0)
RED = (255, 0, 0)
BLUE = (0, 0, 255)
GREEN = (0, 255, 0)
COLORS = [RED, BLUE, GREEN]

# Tetromino shapes
SHAPES = [
    [
        ['.....',
         '.....',
         '.....',
         'OOOO.',
         '.....'],
        ['.....',
         '..O..',
         '..O..',
         '..O..',
         '..O..']
    ],
    [
        ['.....',
         '.....',
         '..O..',
         '.OOO.',
         '.....'],
        ['.....',
         '..O..',
         '.OO..',
         '..O..',
         '.....'],
        ['.....',
         '.....',
         '.OOO.',
         '..O..',
         '.....'],
        ['.....',
         '..O..',
         '..OO.',
         '..O..',
         '.....']
    ],
    [
        [
         '.....',
         '.....',
         '..OO.',
         '.OO..',
         '.....'],
        ['.....',
         '.....',
         '.OO..',
         '..OO.',
         '.....'],
        ['.....',
         '.O...',
         '.OO..',
         '..O..',
         '.....'],
        ['.....',
         '..O..',
         '.OO..',
         '.O...',
         '.....']
    ],
    [
        ['.....',
         '..O..',
         '..O.',
         '..OO.',
         '.....'],
        ['.....',
         '...O.',
         '.OOO.',
         '.....',
         '.....'],
        ['.....',
         '.OO..',
         '..O..',
         '..O..',
         '.....'],
        ['.....',
         '.....',
         '.OOO.',
         '.O...',
         '.....']
    ],
]

class Tetromino: #each individual shape
    #properties: shape, color, location (x and y coordinate), rotation
    def __init__(self, x, y, shape):
        self.x = x
        self.y = y
        self.shape = shape
        self.color = random.choice(COLORS)
        self.rotation = 0

class Tetris: #game logic, how the game will play
    def __init___(self, width, height):
        self.width = width
        self.height = height 
        self.grid = [[0 for i in range(width)] for i in range(height)]
        self.score = 0
        self.game_over = False

#methods: new piece, checking if the landing spot is valid, lock piece in spot, clear filled lines, draw the game, update game
    def new_piece(self): #creates a new piece
        shape = random.choice(SHAPES)
        Tetromino(self.width//2, 0, shape)

    def valid_move(self, piece, x, y, rotation): #check if a piece can go to a certain position
        for i, row in enumerate(piece.shape[(piece.rotation+rotation) % len(piece.shape)]):
            for j, cell in enumerate(row):
                try:
                    if cell =='0' and (self.grid[piece.y + i + y][piece.x +j +x] !=0):
                        return False
                except IndexError:
                    return False
        return True

    def lock_piece(self, piece): #lock piece in place if in valid spot
        for i, row in enumerate(piece.shape[(piece.rotation) % len(piece.shape)]):
            for j, cell in enumerate(row):
                if cell == '0':
                    self.grid[piece.y + i][piece.x + j] = piece.color

    def clear_lines(self): #clear filled in lines
        lines_cleared = 0
        for i, row in enumerate(self.grid[:-1]):
            if all(cell != 0 for cell in row):
                lines_cleared += 1
                del self.grid[i]
                self.grid.insert(0, [0 for _ in range(self.width)])
        return lines_cleared

    def draw(self, screen): #draw the grid and pieces:
        for y, row in enumerate(self.grid):
            for x, cell in enumerate(row):
                if cell:
                    pygame.draw.rect(screen, (x*GRID_SIZE, y*GRID_SIZE, GRID_SIZE -1, GRID_SIZE-1)) 

    def update(self): #update screen
        if not self.game_over:
            if self.valid_move(self.current_piece, 0, 1, 0):
                self.current_piece.y +=1
            else:
                self.lock_piece(self.current_piece) 

def draw_score(screen, score, x, y):
    font = pygame.font.Font("Arial", 36)
    text = font.render(f"Score: {score}", True, WHITE)
    screen.blit(text, (x,y))

def draw_game_over(screen, x, y):
    font = pygame.font.Font("Arial", 50)
    text = font.render("GAME OVER", True, RED)
    screen.blit(text, (x,y))

def main():
    #initialize pygame
    screen = pygame.display.set_mode((WIDTH, HEIGHT))
    pygame.display.set_caption('Tetris')
    clock = pygame.time.Clock()

    fall_time = 0
    fall_speed = 50 #how fast or slow our tetronimos are traveling down the screen

    game = Tetris(WIDTH//GRID_SIZE, HEIGHT//GRID_SIZE) #creating instances(objects) of our classes
#main game loop
while True: #while the game is not over
    screen.fill(BLACK) #"reset" the screen after the last game
    for event in pygame.event.get():
        if event.type == pygame.QUIT:
            pygame.quit()
            sys.exit()
        if event.key==pygame.KEYDOWN:
            if event.key==pygame.K_LEFT:
                if game.valid_move(game.current_piece, -1, 0, 0):
                    game.current_piece.x -= 1  #move the piece left
            if event.key==pygame.K_RIGHT:
                if game.valid_move(game.current_piece, 1, 0, 0):
                    game.current_piece.x += 1 #move the piece to the right
            if event.key==pygame.K_DOWN:
                if game.valid_move(game.current_piece, 0, 1, 0):
                    game.current_piece.y += 1 #add 1 to go down - pygame functionality
                    #move the piece down
            if event.key==pygame.K_UP:
                if game.valid_move(game.current_piece, 0, 0, 1):
                    game.current_piece.rotation += 1 #rotate the piece

